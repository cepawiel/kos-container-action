#
# setup
#

name: "KOS"
run-name: "[KOS][KallistiOS/master][42e3604] Push"
on:
  workflow_dispatch:
    # inputs:
    #   kos_repo:
    #     description: "KallistiOS Repository URL"
    #     required: true
    #     default: "https://github.com/KallistiOS/KallistiOS"
    #   kos_sha:
    #     description: "KallistiOS Commit SHA"
    #     required: true
    #     default: "42e3604"
  push:

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      kos_repo: ${{ steps.set-matrix.outputs.kos_repo }}
      kos_sha: ${{ steps.set-matrix.outputs.kos_sha }}
      dcchain_partial_cfg: ${{ steps.set-matrix.outputs.dcchain_partial_cfg }}
      dcchain_full_cfg: ${{ steps.set-matrix.outputs.dcchain_full_cfg }}
      kos_cfg: ${{ steps.set-matrix.outputs.kos_cfg }}
      ports_cfg: ${{ steps.set-matrix.outputs.ports_cfg }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - id: set-matrix
        run: |
          kos_repo=$(jq -r ".kos_repo" container/dcchain.json)
          kos_sha=$(jq -r ".kos_sha" container/dcchain.json)
          dcchain_partial_cfg=$(jq ".dcchain_partial" container/dcchain.json | jq -c)
          dcchain_full_cfg=$(jq ".dcchain_full" container/dcchain.json | jq -c)
          kos_cfg=$(jq ".kos" container/dcchain.json | jq -c)
          ports_cfg=$(jq ".ports" container/dcchain.json | jq -c)

          echo "kos_repo=$kos_repo" >> $GITHUB_OUTPUT
          echo "kos_sha=$kos_sha" >> $GITHUB_OUTPUT
          echo "dcchain_partial_cfg={\"include\":$(echo $dcchain_partial_cfg)}" >> $GITHUB_OUTPUT
          echo "dcchain_full_cfg={\"include\":$(echo $dcchain_full_cfg)}" >> $GITHUB_OUTPUT
          echo "kos_cfg={\"include\":$(echo $kos_cfg)}" >> $GITHUB_OUTPUT
          echo "ports_cfg={\"include\":$(echo $ports_cfg)}" >> $GITHUB_OUTPUT

  dcchain-part:
    runs-on: self-hosted
    needs:
      - matrix-prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.dcchain_partial_cfg) }}
    name: "[${{ matrix.kos_sha}}] ${{ matrix.job_name }}"
    steps:
      - uses: actions/checkout@v4

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone KOS
        run: |
          cd container
          git clone ${{ needs.matrix-prep.outputs.kos_repo }} KOS
          cd KOS
          git checkout ${{ needs.matrix-prep.outputs.kos_sha }}

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          target: ${{ matrix.target }}
          file: container/Dockerfile.dcchain
          context: "container"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_CONTAINER=ghcr.io/${{ github.repository_owner }}/alpine_dev:latest
            CONFIG_ARGS=${{ matrix.cfg_args }}
  
  dcchain-full:
    runs-on: ubuntu-latest
    needs:
      - matrix-prep
      - dcchain-part
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.dcchain_full_cfg) }}
    name: "[${{ matrix.kos_sha}}] ${{ matrix.job_name }}"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone KOS
        run: |
          cd container
          git clone ${{ needs.matrix-prep.outputs.kos_repo }} KOS
          cd KOS
          git checkout ${{ needs.matrix-prep.outputs.kos_sha }}

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          target: ${{ matrix.target }}
          file: container/Dockerfile.dcchain
          context: "container"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_CONTAINER=ghcr.io/${{ github.repository_owner }}/alpine_dev:latest
            SH4_CONTAINER=ghcr.io/${{ github.repository_owner }}/${{ matrix.sh4_container }}
            ARM_CONTAINER=ghcr.io/${{ github.repository_owner }}/${{ matrix.arm_container }}
            GDB_CONTAINER=ghcr.io/${{ github.repository_owner }}/${{ matrix.gdb_container }}

  kos:
    runs-on: ubuntu-latest
    needs:
      - matrix-prep
      - dcchain-full
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.kos_cfg) }}
    name: "[${{ matrix.kos_sha}}] ${{ matrix.job_name }}"      
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone KOS
        run: |
          cd container
          git clone ${{ needs.matrix-prep.outputs.kos_repo }} KOS
          cd KOS
          git checkout ${{ needs.matrix-prep.outputs.kos_sha }}

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          target: ${{ matrix.target }}
          file: container/Dockerfile.kos
          context: "container"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TOOLCHAIN_CONTAINER=ghcr.io/${{ github.repository_owner }}/${{ matrix.toolchain_container }}:latest

  ports:
    runs-on: ubuntu-latest
    needs:
      - matrix-prep
      - kos
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.ports_cfg) }}
    name: "[${{ matrix.kos_sha}}] ${{ matrix.job_name }}"      
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone KOS
        run: |
          cd container
          git clone ${{ needs.matrix-prep.outputs.kos_repo }} KOS
          cd KOS
          git checkout ${{ needs.matrix-prep.outputs.kos_sha }}
          cd  ../
          git clone ${{ matrix.ports_repo }} PORTS
          cd PORTS
          git checkout ${{ matrix.ports_sha }}

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          target: ${{ matrix.target }}
          file: container/Dockerfile.kos
          context: "container"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TOOLCHAIN_CONTAINER=ghcr.io/${{ github.repository_owner }}/${{ matrix.toolchain_container }}:latest
