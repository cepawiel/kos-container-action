#
# setup
#

name: Toolchain Build
on:
  workflow_dispatch:
  push:

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      dcchain_cfg: ${{ steps.set-matrix.outputs.dcchain_cfg }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - id: set-matrix
        run: |
          cat container/dcchain.json
          echo "dcchain_cfg=$(cat container/dcchain.json)" >> $GITHUB_OUTPUT

  dcchain:
    runs-on: ubuntu-latest
    needs:
      - matrix-prep
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix-prep.outputs.dcchain_cfg)}}
    steps:
      - name: asdf
        run: |
          echo ${{ matrix.target }}
          echo ${{ matrix.tag }}

  # build:
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v4

  #     # - name: Set up QEMU
  #     #   uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Clone KOS
  #       run: |
  #         cd container
  #         git clone https://github.com/KallistiOS/KallistiOS KOS

  #     - name: Generate Image Metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ghcr.io/${{ github.repository_owner }}/${{ inputs.docker_target }}
  #         tags: |
  #           type=schedule,pattern={{date 'YYYYMMDD'}}
  #           type=sha

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         target: ${{ inputs.docker_target }}
  #         file: container/Dockerfile.dcchain
  #         context: "container"
  #         push: true
  #         tags: ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}
  #         build-args: |
  #           BUILD_DEPS=ghcr.io/${{ github.repository_owner }}/alpine_dev:latest
  #           CONFIG_ARGS="${{ inputs.dcchain_args }}"
