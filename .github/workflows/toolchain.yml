#
# setup
#

name: Toolchain Build
on:
  workflow_dispatch:
  push:

jobs:
  matrix-prep:
    runs-on: ubuntu-latest
    outputs:
      dcchain_partial_cfg: ${{ steps.set-matrix.outputs.dcchain_partial_cfg }}
      dcchain_full_cfg: ${{ steps.set-matrix.outputs.dcchain_full_cfg }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - id: set-matrix
        run: |
          dcchain_partial_cfg=$(jq ".dcchain_partial" container/dcchain.json | jq -c)
          dcchain_full_cfg=$(jq ".dcchain_full" container/dcchain.json | jq -c)
          echo "dcchain_partial_cfg={\"include\":$(echo $dcchain_partial_cfg)}" >> $GITHUB_OUTPUT
          echo "dcchain_full_cfg={\"include\":$(echo $dcchain_full_cfg)}" >> $GITHUB_OUTPUT

  dcchain-part:
    runs-on: self-hosted
    needs:
      - matrix-prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.dcchain_partial_cfg) }}
    steps:
      - uses: actions/checkout@v4

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone KOS
        run: |
          cd container
          git clone ${{ matrix.kos_repo }} KOS

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          target: ${{ matrix.target }}
          file: container/Dockerfile.dcchain
          context: "container"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_CONTAINER=ghcr.io/${{ github.repository_owner }}/alpine_dev:latest
            CONFIG_ARGS=${{ matrix.cfg_args }}
  dcchain-full:
    runs-on: ubuntu-latest
    needs:
      - matrix-prep
      - dcchain-part
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prep.outputs.dcchain_full_cfg) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clone KOS
        run: |
          cd container
          git clone ${{ matrix.kos_repo }} KOS

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          target: ${{ matrix.target }}
          file: container/Dockerfile.dcchain
          context: "container"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_CONTAINER=ghcr.io/${{ github.repository_owner }}/alpine_dev:latest
            SH4_CONTAINER=${{ matrix.sh4_container }}
            ARM_CONTAINER=${{ matrix.arm_container }}
            GDB_CONTAINER=${{ matrix.gdb_container }}
            BUILD_DEPS=ghcr.io/${{ github.repository_owner }}/alpine_dev:latest

