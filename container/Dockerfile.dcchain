#
# Dockerfile for KallistiOS Toolchain
#

# Define before FROM to use globally across stages
ARG BASE_PATH=/opt/toolchains/dc
ARG KOS_PATH=${BASE_PATH}/kos
ARG DCCHAIN_PATH=${KOS_PATH}/utils/dc-chain

# FROM alpine:latest as build-deps
FROM ghcr.io/jitesoft/alpine as build-deps

# Installing prerequisites
RUN apk add --no-cache \
	build-base \
	patch \
	bash \
	texinfo \
	libjpeg-turbo-dev \
	gmp-dev \
	mpfr-dev \
	mpc1-dev \
	libpng-dev \
	curl \
	wget \
	git \
	python3 \
	subversion \
	elfutils-dev \
	coreutils

FROM build-deps as toolchain-setup

ARG KOS_PATH
ARG DCCHAIN_PATH

# Copy Necessary Data into Container
# By only copying the necessary files to build the toolchain docker
# can cache the toolchain layer as long as none of the files in these directories
# are changed. Doing so would trigger rebuilding the toolchain.
# TODO: More specifically copy includes to avoid rebuilds
COPY KOS/include ${KOS_PATH}/include
COPY KOS/kernel/arch/dreamcast/include/arch ${KOS_PATH}/kernel/arch/dreamcast/include/arch
COPY KOS/kernel/arch/dreamcast/include/dc ${KOS_PATH}/kernel/arch/dreamcast/include/dc
COPY KOS/kernel/arch/dreamcast/kernel ${KOS_PATH}/kernel/arch/dreamcast/kernel
COPY KOS/utils/dc-chain ${DCCHAIN_PATH}

# Build Arg to select either "kos" or "raw" toolchain build
ARG BUILD_TYPE=kos

# name of toolchain config file located in utils/dc-chain
# passed as arg to docker build command
ARG CONFIG_ARGS

# COPY config_toolchain.sh ${DCCHAIN_PATH}/config_toolchain.sh

ARG BUILDPLATFORM 
ARG TARGETPLATFORM
RUN echo "Build: $BUILDPLATFORM" && echo "Target: $TARGETPLATFORM"
RUN uname -a

# We copy the specified config to the required config.mk location.
# Also overwrite the default -j2 with the max avalable cores using nproc. 
RUN cd ${DCCHAIN_PATH} \
	&& ls -la \
    && touch config.mk
# 	&& make fetch -j4 ${CONFIG_ARGS}

# Build SH4 Toolchain
FROM toolchain-setup as sh4-toolchain
ARG DCCHAIN_PATH

RUN cd ${DCCHAIN_PATH} \
	&& echo "Building SH4 Toolchain" \
	&& make build-sh4 -j2 ${CONFIG_ARGS}

# Build ARM Toolchain
FROM toolchain-setup as arm-toolchain
ARG DCCHAIN_PATH

RUN cd ${DCCHAIN_PATH} \
	&& echo "Building ARM Toolchain" \
	&& make build-arm -j2 ${CONFIG_ARGS}

# Build GDB
FROM toolchain-setup as gdb-build
ARG DCCHAIN_PATH

RUN cd ${DCCHAIN_PATH} \
	&& echo "Building GDB" \
	&& make gdb -j2 ${CONFIG_ARGS}
	

